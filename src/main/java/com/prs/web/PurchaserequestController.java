package com.prs.web;

import java.sql.Timestamp;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.prs.business.purchaserequest.PurchaseRequest;
import com.prs.business.purchaserequest.PurchaseRequestRepository;
import com.prs.business.user.User;
import com.prs.util.PRSMaintenanceReturn;


@CrossOrigin
@Controller   
@RequestMapping(path="/PurchaseRequests") 
public class PurchaserequestController extends BaseController {
	@Autowired // This means to get the bean called PurchaserequestRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private PurchaseRequestRepository purchaseRequestRepository;
	
	@GetMapping(path="/List") //instead of all, we use list 
	public @ResponseBody Iterable<PurchaseRequest> getAllPurchaserequest() {
		// This returns a JSON or XML with the users
		return purchaseRequestRepository.findAll();
	}
	
	@GetMapping(path="/Get")
	public @ResponseBody List<PurchaseRequest> getPurchaserequest (@RequestParam int id) {
		
		Optional<PurchaseRequest> pr =purchaseRequestRepository.findById(id);
		return getReturnArray(pr.get());
//		if (pr.isPresent())
//			return pr.get();
//		else
//			return null;
	}
	
	@PostMapping(path="/Add") // Map ONLY GET Requests
	public @ResponseBody PRSMaintenanceReturn addNewPurchaserequest (@RequestBody PurchaseRequest purchaseRequest) {
			try {
				purchaseRequestRepository.save(purchaseRequest);
	}
	catch (Exception e) {
		e.printStackTrace();
		purchaseRequest = null;
	}
return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
}
	
	@PostMapping(path="/Change")
	public @ResponseBody PRSMaintenanceReturn updatePurchaserequest (@RequestBody PurchaseRequest purchaseRequest) {
		
		try {
			purchaseRequestRepository.save(purchaseRequest);
			System.out.println("Purchaserequest updated:  "+ purchaseRequest);
		}
		catch (Exception e) {
			purchaseRequest = null;
		}
		
		return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
	}

	@GetMapping(path="/Remove")
	public @ResponseBody PRSMaintenanceReturn deleteProduct (@RequestParam int id) {
		
		Optional<PurchaseRequest> purchaseRequest= purchaseRequestRepository.findById(id);
		try {
			PurchaseRequest pr = purchaseRequest.get();
			purchaseRequestRepository.delete(pr);
			System.out.println("Product deleted:  "+pr);
		}
		catch (Exception e) {
			purchaseRequest = null;
		}
		return PRSMaintenanceReturn.getMaintReturn(purchaseRequest);
	}	
	/*
	 *  Business rules for submitting for review:
	 *  - Update the submittedDate to current date
	 *  - Update the status to 'review', unless total is <= $50 then set to 'approved'
	 */
	@PostMapping(path="/SubmitForReview")
	public @ResponseBody PRSMaintenanceReturn submitForReviewPurchaserequest (@RequestBody PurchaseRequest pr) {
		
		try {
			if (pr.getTotal() <=50) {
				pr.setStatus(PurchaseRequest.STATUS_APPROVED);
			}
			else {
				pr.setStatus(PurchaseRequest.STATUS_REVIEW);
			}
		
			pr.setSubmittedDate(new Timestamp(System.currentTimeMillis()));
			purchaseRequestRepository.save(pr);
		}
		catch (Exception e) {
			e.printStackTrace();
			pr = null;
		}
		
		return PRSMaintenanceReturn.getMaintReturn(pr);
	}
	
	@PostMapping(path="/RequestReview")
	public @ResponseBody Iterable<PurchaseRequest> getRequestReview(@RequestBody User user) {
		
		return purchaseRequestRepository.findAllByUserNot (user);
	}
	

	
}