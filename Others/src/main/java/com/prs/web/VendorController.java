package com.prs.web;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;


import com.prs.business.vendor.Vendor;
import com.prs.business.vendor.VendorRepository;
import com.prs.util.PRSMaintenanceReturn;


@Controller    
@RequestMapping(path="/Vendors") 
public class VendorController extends BaseController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private VendorRepository vendorRepository;

	
	@GetMapping(path="/List") //instead of all, we use list 
	public @ResponseBody Iterable<Vendor> getAllVendors() {
		// This returns a JSON or XML with the users
		return vendorRepository.findAll();
	}
	
	@GetMapping(path="/Get")
	public @ResponseBody List<Vendor> getVendor (@RequestParam int id) {
		
		Optional<Vendor> v =vendorRepository.findById(id);
		return getReturnArray(v.get());
//		if (v.isPresent())
//			return v.get();
//		else
//			return null;
	}
	
	@PostMapping(path="/Add") // Map ONLY GET Requests
	public @ResponseBody PRSMaintenanceReturn addNewVendor (@RequestBody Vendor vendor) {
			try {
		vendorRepository.save(vendor);
		return PRSMaintenanceReturn.getMaintReturn(vendor);
	}
	catch (Exception e) {
		vendor = null;
	}
return PRSMaintenanceReturn.getMaintReturn(vendor);
}
	@GetMapping(path="/Remove") 
	public @ResponseBody PRSMaintenanceReturn deleteVendor (@RequestParam int id) {
		Optional<Vendor> vendor = vendorRepository.findById(id);
		try {
			Vendor v = vendor.get();
			vendorRepository.delete(v);
			System.out.println("Vendor deleted:  "+v);
		}
		catch (Exception e) {
			vendor = null;
		}
		return PRSMaintenanceReturn.getMaintReturn(vendor);
	}
	
	@PostMapping(path="/Change") 
	public @ResponseBody PRSMaintenanceReturn updateVendor (@RequestBody Vendor vendor) {
		try {
			vendorRepository.save(vendor);
			System.out.println("Vendor updated:  "+vendor);
		}
		catch (Exception e) {
			vendor = null;
		}
		
		return PRSMaintenanceReturn.getMaintReturn(vendor);
	}
}