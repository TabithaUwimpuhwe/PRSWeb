package com.prs.web;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.prs.business.user.User;
import com.prs.business.user.UserRepository;
import com.prs.util.PRSMaintenanceReturn;


@Controller    // This means that this class is a Controller
@RequestMapping(path="/Users") // This means URL's start with /user (after Application path)
public class UserController extends BaseController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/List") //instead of all, we use list 
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}
	
	@GetMapping(path="/Get")
	public @ResponseBody List<User> getUSer (@RequestParam int id) {
		
		Optional<User> u =userRepository.findById(id);
		return getReturnArray(u.get());
//		if (u.isPresent())
//			return u.get();
//		else
//			return null;
	}
	
	@GetMapping(path="/Authenticate")
	public @ResponseBody List<User> getAuthenticate (@RequestParam String uname, @RequestParam String pwd) {
	
		User user = userRepository.findByUserNameAndPassword(uname, pwd);
		return getReturnArray(user);
	
	}
	
	@PostMapping(path="/Add") // Map ONLY GET Requests
	public @ResponseBody PRSMaintenanceReturn addNewUser (@RequestBody User user) {
			try {
		userRepository.save(user);
		return PRSMaintenanceReturn.getMaintReturn(user);
	}
			catch (Exception e) {
		user = null;
	}
return PRSMaintenanceReturn.getMaintReturn(user);
}
	
	@GetMapping(path="/Remove") //Map ONLY GET requests
	public @ResponseBody PRSMaintenanceReturn deleteUser (@RequestParam int id) {
		//@ResponseBody means the returned String is the response, not a view name
		//@ResponseParam means it is a parameter from the GET or POST request
		
	Optional <User> user = userRepository.findById(id);
		try {
	userRepository.delete(user.get());
	//System.out.printlin("User deleted:   " + user.get());
}
catch (Exception e) {
	user = null;
}
return PRSMaintenanceReturn.getMaintReturn(user);
}
	
	@PostMapping(path="/Change") 
	public @ResponseBody PRSMaintenanceReturn updateUser (@RequestBody User user) {
		try {
			userRepository.save(user);
		}
		catch (Exception e) {
			user = null;
		}
	return PRSMaintenanceReturn.getMaintReturn(user);
	}
}


	
	
	
	